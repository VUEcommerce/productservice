type Query {
    clothes(id: ID!): Clothes
    clothesByBrand(brand: String!): [Clothes]
    brand(id: ID!): Brand
}

type Mutation {
    createClothes(input: ClothesInput!): Clothes!
    updateClothes(input: ClothesInput!): Boolean
    deleteClothes(id: String!): Boolean
    createBrand(input: BrandInput!): Brand!
    updateBrand(input: BrandInput!): Boolean
    deleteBrand(id: String!): Boolean
}

interface IProduct {
    id: ID!
    sku: String!,
    name: String!,
    brand: String,
    price: Float,
    qty: Int,
    desc: String,
    wt: Float,
    img: String
}

type Product implements IProduct {
    id: ID!
    sku: String!,
    name: String!,
    brand: String,
    price: Float,
    qty: Int,
    desc: String,
    wt: Float,
    img: String
}

type Clothes implements IProduct {
    id: ID!
    sku: String!,
    name: String!,
    brand: String,
    price: Float,
    qty: Int,
    desc: String,
    wt: Float,
    img: String,
    size: Size
}

input ClothesInput {
    id: ID!,
    sku: String!,
    name: String!,
    brand: String,
    price: Float,
    qty: Int,
    desc: String,
    wt: Float,
    img: String,
    size: Size
}

enum Size {
    ExtraSmall,
    Small,
    Medium,
    Large,
    ExtraLarge
}

type Brand {
    id: ID!
    name: String!,
    rate: Int,
    follow: Int,
    location: String,
    img: String,
    joindate: String,
    lastmod: String,
    instag: String,
    fb: String,
    shopif: String
}

input BrandInput {
    id: ID!
    name: String!,
    rate: Int,
    follow: Int,
    location: String,
    img: String,
    joindate: String,
    lastmod: String,
    instag: String,
    fb: String,
    shopif: String
}



