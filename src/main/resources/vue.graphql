type Query {
    clothes(id: ID!): Clothes
}

type Mutation {
    createClothes(input: ClothesInput!): Clothes!
    updateClothes(input: ClothesInput!): ID
}

interface IProduct {
    id: ID!
    sku: String!,
    name: String!,
    brand: String,
    price: Float,
    quantity: Int,
    description: String,
    weight: Float,
    image: String
}

type Product implements IProduct {
    id: ID!
    sku: String!,
    name: String!,
    brand: String,
    price: Float,
    quantity: Int,
    description: String,
    weight: Float,
    image: String
}

type Clothes implements IProduct {
    id: ID!
    sku: String!,
    name: String!,
    brand: String,
    price: Float,
    quantity: Int,
    description: String,
    weight: Float,
    image: String,
    size: Size
}

input ClothesInput {
    id: ID!,
    sku: String!,
    name: String!,
    brand: String,
    price: Float,
    quantity: Int,
    description: String,
    weight: Float,
    image: String,
    size: Size
}

enum Size {
    ExtraSmall,
    Small,
    Medium,
    Large,
    ExtraLarge
}


